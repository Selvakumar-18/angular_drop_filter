{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, ViewChild, Injectable, NgModule } from '@angular/core';\nimport * as go from 'gojs';\nimport produce from 'immer';\n/**\r\n * Defines some shared helper static functions, used in Diagram / Palette / Overview Components\r\n */\n\nconst _c0 = [\"ngDiagram\"];\nconst _c1 = [\"ngPalette\"];\nconst _c2 = [\"ngOverview\"];\n\nclass NgDiagramHelper {\n  constructor() {}\n  /**\r\n   * Ensures mousemove event listeners on a diagram's canvas are run outside NgZone.\r\n   * This way, change detection isn't triggered on each mousemove, improving performance.\r\n   *\r\n   * If some state-alteration must happen on a mousemove event inside the diagram, use zone.run() to make sure the event triggers angular change detection.\r\n   * Used by DiagramComponent, PaletteComponent, and OverviewComponent in their ngAfterViewInit lifecycle hooks\r\n   * @param diagram\r\n   * @param zone\r\n   */\n\n\n  static makeMouseMoveRunOutsideAngularZone(diagram, zone) {\n    diagram.addEventListener = (DOMElement, name, listener, capture) => {\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\n\n      if (name === 'mousemove') {\n        zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\n      } else {\n        zone.run(() => {\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\n        });\n      }\n    };\n  }\n  /**\r\n   * Initialize a given diagram's model with given node / link / model data\r\n   * @param diagram\r\n   * @param nodeDataArray\r\n   * @param linkDataArray\r\n   * @param modelData\r\n   */\n\n\n  static initializeModel(diagram, nodeDataArray, linkDataArray, modelData) {\n    diagram.delayInitialization(() => {\n      const model = diagram.model;\n      model.commit(m => {\n        if (modelData) {\n          m.assignAllDataProperties(m.modelData, modelData);\n        }\n\n        m.mergeNodeDataArray(m.cloneDeep(nodeDataArray));\n\n        if (linkDataArray && m instanceof go.GraphLinksModel) {\n          m.mergeLinkDataArray(m.cloneDeep(linkDataArray));\n        }\n      }, null);\n    });\n  }\n  /**\r\n   * Initialize the model changed listener for the Palette / Diagram of a given compoennt; ensure it runs inside the component's ngZone.\r\n   * Those changes will be emitted through a the component's modelChange EventEmitter.\r\n   * @param component\r\n   */\n\n\n  static initializeModelChangedListener(component) {\n    var diagram = null;\n    if (!component.hasOwnProperty(\"diagram\") && !component.hasOwnProperty(\"palette\")) return;\n    if (component.hasOwnProperty(\"diagram\")) diagram = component[\"diagram\"];\n    if (component.hasOwnProperty(\"palette\")) diagram = component[\"palette\"];\n\n    component.modelChangedListener = e => {\n      if (e.isTransactionFinished && e.model && !e.model.isReadOnly && component.modelChange) {\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\n        component.zone.run(() => {\n          const dataChanges = e.model.toIncrementalData(e);\n          if (dataChanges !== null) component.modelChange.emit(dataChanges);\n        });\n      }\n    };\n\n    diagram.addModelChangedListener(component.modelChangedListener);\n  }\n  /**\r\n   * Merge the app-level node / link / model data of a supplied Diagram|Palette Component with its underlying Diagram|Palette model data\r\n   * @param component\r\n   * @param isInit Whether or not to treat this update as a Diagram initialization\r\n   */\n\n\n  static mergeAppDataWithModel(component, isInit) {\n    var diagram = null;\n    if (component.hasOwnProperty(\"diagram\")) diagram = component[\"diagram\"];\n    if (component.hasOwnProperty(\"palette\")) diagram = component[\"palette\"];\n    diagram.model.commit(m => {\n      if (isInit) diagram.model.modelData = {}; // update modelData first, in case bindings on nodes / links depend on model data\n\n      diagram.model.assignAllDataProperties(diagram.model.modelData, component.modelData); // merge node / link data\n\n      if (isInit) diagram.model.nodeDataArray = [];\n      diagram.model.mergeNodeDataArray(component.nodeDataArray);\n\n      if (component.linkDataArray && diagram.model instanceof go.GraphLinksModel) {\n        if (isInit) diagram.model.linkDataArray = [];\n        diagram.model.mergeLinkDataArray(component.linkDataArray);\n      }\n    }, isInit ? null : 'update data');\n  }\n\n}\n\nclass DiagramComponent {\n  constructor(zone) {\n    this.zone = zone;\n    /**  Link data for diagram. Optional. */\n\n    this.linkDataArray = null;\n    /** Model data for diagram. Optional. */\n\n    this.modelData = null;\n    /** Model changed listener function for diagram */\n\n    this.modelChangedListener = null;\n    /** Whether or not to skip merging app data with GoJS model data (set to true if update is coming from GoJS, false if coming from app-level, usually) */\n\n    this.skipsDiagramUpdate = false;\n    /** Event emitter -- fires when diagram model changes. Capture this emitted event in parent component */\n\n    this.modelChange = new EventEmitter();\n    /** The Diagram itself */\n\n    this.diagram = null;\n    /** An internal flag used to tell ngOnChanges to treat the next sync operation as a Diagram initialization */\n\n    this.wasCleared = false;\n  }\n  /**\r\n   * Initializes diagram / model after view init\r\n   */\n\n\n  ngAfterViewInit() {\n    if (!this.diagramDiv) {\n      throw new Error(\"diagramDiv is not defined\");\n    }\n\n    this.diagram = this.initDiagram();\n\n    if (!(this.diagram instanceof go.Diagram)) {\n      throw new Error(\"initDiagram function did not return a go.Diagram\");\n    } // reduces change detection on mouse moves, boosting performance\n\n\n    NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.diagram, this.zone); // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,\n    // using the overridden addEventListener function defined in makeMouseMoveRunOutsideAngularZone\n\n    const divRef = this.diagramDiv.nativeElement;\n    if (divRef === null) return;\n    this.diagram.div = divRef; // initialize the diagram model with the provided node / link / model data\n\n    NgDiagramHelper.initializeModel(this.diagram, this.nodeDataArray, this.linkDataArray, this.modelData); // initializer model listener\n\n    NgDiagramHelper.initializeModelChangedListener(this);\n  } // end ngAfterViewInit\n\n  /**\r\n   * If a change has occurred on an @Input property, merge the app-level changes with GoJS\r\n   */\n\n\n  ngOnChanges() {\n    if (!this.diagram || !this.diagram.model || this.skipsDiagramUpdate) return; // if clear was just called, treat this as initial\n\n    if (this.wasCleared) {\n      this.diagram.delayInitialization(() => {\n        NgDiagramHelper.mergeAppDataWithModel(this, true);\n      });\n      this.wasCleared = false;\n    } else {\n      NgDiagramHelper.mergeAppDataWithModel(this);\n    }\n  } // end ngOnChanges\n\n  /**\r\n   * Clears the diagram of all nodes, links, and model data.\r\n   * Also clears the UndoManager history and clipboard.\r\n   * The next state update will be treated as diagram initialization.\r\n   */\n\n\n  clear() {\n    const diagram = this.diagram;\n\n    if (diagram !== null) {\n      diagram.clear();\n      this.wasCleared = true;\n    }\n  } // end clear function\n\n  /**\r\n   * Set this.diagram.div to null, removing all event listeners\r\n   */\n\n\n  ngOnDestroy() {\n    this.diagram.div = null; // removes event listeners\n  } // end ngOnDestroy function\n\n\n}\n/** @nocollapse */\n\n\nDiagramComponent.ɵfac = function DiagramComponent_Factory(t) {\n  return new (t || DiagramComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n};\n/** @nocollapse */\n\n\nDiagramComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DiagramComponent,\n  selectors: [[\"gojs-diagram\"]],\n  viewQuery: function DiagramComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.diagramDiv = _t.first);\n    }\n  },\n  inputs: {\n    initDiagram: \"initDiagram\",\n    nodeDataArray: \"nodeDataArray\",\n    linkDataArray: \"linkDataArray\",\n    modelData: \"modelData\",\n    divClassName: \"divClassName\",\n    skipsDiagramUpdate: \"skipsDiagramUpdate\"\n  },\n  outputs: {\n    modelChange: \"modelChange\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[3, \"className\"], [\"ngDiagram\", \"\"]],\n  template: function DiagramComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"className\", ctx.divClassName);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DiagramComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gojs-diagram',\n      template: '<div #ngDiagram [className]=divClassName></div>'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, {\n    initDiagram: [{\n      type: Input\n    }],\n    nodeDataArray: [{\n      type: Input\n    }],\n    linkDataArray: [{\n      type: Input\n    }],\n    modelData: [{\n      type: Input\n    }],\n    divClassName: [{\n      type: Input\n    }],\n    skipsDiagramUpdate: [{\n      type: Input\n    }],\n    modelChange: [{\n      type: Output\n    }],\n    diagramDiv: [{\n      type: ViewChild,\n      args: ['ngDiagram', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass PaletteComponent {\n  constructor(zone) {\n    this.zone = zone;\n    /** Link data for palette. Optional. */\n\n    this.linkDataArray = null;\n    /** Model data for palette. Optional. */\n\n    this.modelData = null;\n    /** Event emitter -- fires when palette model changes. Capture this emitted event in parent component */\n\n    this.modelChange = new EventEmitter();\n    /** The Palette itself */\n\n    this.palette = null;\n  }\n  /**\r\n   * Initialize Palette after view init\r\n   */\n\n\n  ngAfterViewInit() {\n    if (!this.paletteDiv) {\n      throw new Error(\"paletteDiv is not defined\");\n    }\n\n    this.palette = this.initPalette();\n\n    if (!(this.palette instanceof go.Palette)) {\n      throw new Error(\"initPalette function did not return a go.Palette\");\n    } // reduces change detection on mouse moves, boosting performance\n\n\n    NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.palette, this.zone); // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,\n    // using the overridden addEventListener function above\n\n    const divRef = this.paletteDiv.nativeElement;\n    if (divRef == null) return;\n    this.palette.div = divRef; // initialize palette model\n\n    NgDiagramHelper.initializeModel(this.palette, this.nodeDataArray, this.linkDataArray, this.modelData);\n  }\n  /**\r\n   * If a change has occured on an @Input property, merge the app-level changes with GoJS\r\n   */\n\n\n  ngOnChanges() {\n    if (!this.palette || !this.palette.model) return;\n    NgDiagramHelper.mergeAppDataWithModel(this);\n  } // end ngOnChanges \n\n\n  ngOnDestroy() {\n    this.palette.div = null; // removes event listeners\n  }\n\n}\n/** @nocollapse */\n\n\nPaletteComponent.ɵfac = function PaletteComponent_Factory(t) {\n  return new (t || PaletteComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n};\n/** @nocollapse */\n\n\nPaletteComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PaletteComponent,\n  selectors: [[\"gojs-palette\"]],\n  viewQuery: function PaletteComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paletteDiv = _t.first);\n    }\n  },\n  inputs: {\n    initPalette: \"initPalette\",\n    nodeDataArray: \"nodeDataArray\",\n    linkDataArray: \"linkDataArray\",\n    modelData: \"modelData\",\n    divClassName: \"divClassName\"\n  },\n  outputs: {\n    modelChange: \"modelChange\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[3, \"className\"], [\"ngPalette\", \"\"]],\n  template: function PaletteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"className\", ctx.divClassName);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PaletteComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gojs-palette',\n      template: '<div #ngPalette [className]=divClassName></div>'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, {\n    initPalette: [{\n      type: Input\n    }],\n    nodeDataArray: [{\n      type: Input\n    }],\n    linkDataArray: [{\n      type: Input\n    }],\n    modelData: [{\n      type: Input\n    }],\n    divClassName: [{\n      type: Input\n    }],\n    modelChange: [{\n      type: Output\n    }],\n    paletteDiv: [{\n      type: ViewChild,\n      args: ['ngPalette', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass OverviewComponent {\n  constructor(zone) {\n    this.zone = zone;\n    /** The Diagram to observe with the Overview */\n\n    this.observedDiagram = null;\n    /** The Overview itself  */\n\n    this.overview = null;\n  }\n  /**\r\n   * Initialize the overview\r\n   */\n\n\n  ngAfterViewInit() {\n    if (!this.overviewDiv) {\n      throw new Error(\"overviewDiv is not defined\");\n    }\n\n    if (this.initOverview) {\n      this.overview = this.initOverview();\n\n      if (!(this.overview instanceof go.Overview)) {\n        throw new Error(\"initOverview function did not return a go.Overview\");\n      }\n    } else {\n      this.overview = new go.Overview();\n      this.overview.contentAlignment = go.Spot.Center;\n    } // reduces change detection on mouse moves, boosting performance\n\n\n    NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.overview, this.zone);\n    this.overview.div = this.overviewDiv.nativeElement;\n  }\n  /**\r\n   * Only update when the observed diagram changes\r\n   * @param changes\r\n   */\n\n\n  ngOnChanges(changes) {\n    if (!this.overview) return;\n\n    if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {\n      this.overview.observed = changes.observedDiagram.currentValue;\n    }\n  }\n\n  ngOnDestroy() {\n    this.overview.div = null; // removes event listeners\n  }\n\n}\n/** @nocollapse */\n\n\nOverviewComponent.ɵfac = function OverviewComponent_Factory(t) {\n  return new (t || OverviewComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n};\n/** @nocollapse */\n\n\nOverviewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: OverviewComponent,\n  selectors: [[\"gojs-overview\"]],\n  viewQuery: function OverviewComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c2, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.overviewDiv = _t.first);\n    }\n  },\n  inputs: {\n    initOverview: \"initOverview\",\n    divClassName: \"divClassName\",\n    observedDiagram: \"observedDiagram\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[3, \"className\"], [\"ngOverview\", \"\"]],\n  template: function OverviewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"className\", ctx.divClassName);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverviewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gojs-overview',\n      template: '<div #ngOverview [className]=divClassName></div>'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }];\n  }, {\n    initOverview: [{\n      type: Input\n    }],\n    divClassName: [{\n      type: Input\n    }],\n    observedDiagram: [{\n      type: Input\n    }],\n    overviewDiv: [{\n      type: ViewChild,\n      args: ['ngOverview', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass DataSyncService {\n  /**\r\n   * Sync a node data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param nodeData The node data array to merge these changes with\r\n   * @param model Required if you have defined your model.nodeKeyProperty to be something other than 'key'\r\n   * @returns A node data array, merged with the changes\r\n   */\n  static syncNodeData(changes, nodeData, model) {\n    if (!changes) return nodeData;\n    if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys) return nodeData; // maintain a map of modified nodes for fast lookup during insertion\n\n    const modifiedNodesMap = new go.Map(); // generate a map of keys -> indices for faster operations\n\n    const keyIdxMap = new Map();\n    nodeData.forEach((nd, idx) => {\n      const key = model ? model.getKeyForNodeData(nd) : nd['key'];\n      keyIdxMap.set(key, idx);\n    }); // nodeData is immutable, modify it using the immer package's \"produce\" function (creates new array)\n\n    var newNodeDataArray = produce(nodeData, draft => {\n      // account for modified node data\n      if (changes.modifiedNodeData) {\n        changes.modifiedNodeData.forEach(nd => {\n          // Get the value of the node key property checking wether is a function or a string\n          const key = model ? model.getKeyForNodeData(nd) : nd['key'];\n          modifiedNodesMap.set(key, nd);\n          const idx = keyIdxMap.get(key);\n\n          if (idx !== undefined && idx >= 0) {\n            draft[idx] = nd;\n          }\n        });\n      } // account for inserted node data\n\n\n      if (changes.insertedNodeKeys) {\n        changes.insertedNodeKeys.forEach(key => {\n          const nd = modifiedNodesMap.get(key);\n\n          if (nd && !keyIdxMap.has(key)) {\n            draft.push(nd);\n          }\n        });\n      } // account for removed node data\n\n\n      if (changes.removedNodeKeys) {\n        const removals = changes.removedNodeKeys.map(key => keyIdxMap.get(key)).sort();\n\n        for (let i = removals.length - 1; i >= 0; i--) {\n          draft.splice(removals[i], 1);\n        }\n      }\n    });\n    return newNodeDataArray;\n  }\n  /**\r\n   * Sync a link data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param linkData The link data array to merge these changes with\r\n   * @param model Required if you have defined your model.linkKeyProperty to be something other than 'key'\r\n   * @returns A link data array, merged with the changes\r\n   */\n\n\n  static syncLinkData(changes, linkData, model) {\n    if (!changes) return linkData;\n    if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys) return linkData; // maintain a map of modified nodes for fast lookup during insertion\n\n    const modifiedLinksMap = new go.Map(); // generate a map of keys -> indices for faster operations\n\n    const keyIdxMap = new Map();\n    linkData.forEach((ld, idx) => {\n      const key = model ? model.getKeyForLinkData(ld) : ld['key'];\n      keyIdxMap.set(key, idx);\n    }); // linkData is immutable, modify it using the immer package's \"produce\" function (creates new array)\n\n    linkData = produce(linkData, draft => {\n      // account for modified link data\n      if (changes.modifiedLinkData) {\n        changes.modifiedLinkData.forEach(ld => {\n          // Get the value of the link key\n          const key = model ? model.getKeyForLinkData(ld) : ld['key'];\n          modifiedLinksMap.set(key, ld);\n          const idx = keyIdxMap.get(key);\n\n          if (idx !== undefined && idx >= 0) {\n            draft[idx] = ld;\n          }\n        });\n      } // account for inserted link data\n\n\n      if (changes.insertedLinkKeys) {\n        changes.insertedLinkKeys.forEach(key => {\n          const nd = modifiedLinksMap.get(key);\n\n          if (nd && !keyIdxMap.has(key)) {\n            draft.push(nd);\n          }\n        });\n      } // account for removed link data\n\n\n      if (changes.removedLinkKeys) {\n        const removals = changes.removedLinkKeys.map(key => keyIdxMap.get(key)).sort();\n\n        for (let i = removals.length - 1; i >= 0; i--) {\n          draft.splice(removals[i], 1);\n        }\n      }\n    });\n    return linkData;\n  }\n  /**\r\n   * Sync modelData with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param modelData The modelData to merge these changes with\r\n   * @returns A modelData object, merged with the changes\r\n   */\n\n\n  static syncModelData(changes, modelData) {\n    if (!changes) return modelData;\n    if (!changes.modelData) return modelData;\n\n    if (changes.modelData) {\n      return changes.modelData;\n    }\n  }\n\n}\n/** @nocollapse */\n\n\nDataSyncService.ɵfac = function DataSyncService_Factory(t) {\n  return new (t || DataSyncService)();\n};\n/** @nocollapse */\n\n\nDataSyncService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DataSyncService,\n  factory: DataSyncService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataSyncService, [{\n    type: Injectable\n  }], null, null);\n})();\n\nclass GojsAngularModule {}\n/** @nocollapse */\n\n\nGojsAngularModule.ɵfac = function GojsAngularModule_Factory(t) {\n  return new (t || GojsAngularModule)();\n};\n/** @nocollapse */\n\n\nGojsAngularModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GojsAngularModule\n});\n/** @nocollapse */\n\nGojsAngularModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DataSyncService]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GojsAngularModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [DiagramComponent, OverviewComponent, PaletteComponent],\n      imports: [],\n      providers: [DataSyncService],\n      exports: [DiagramComponent, OverviewComponent, PaletteComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of gojs-angular\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { DataSyncService, DiagramComponent, GojsAngularModule, OverviewComponent, PaletteComponent };","map":{"version":3,"names":["i0","EventEmitter","Component","Input","Output","ViewChild","Injectable","NgModule","go","produce","NgDiagramHelper","constructor","makeMouseMoveRunOutsideAngularZone","diagram","zone","addEventListener","DOMElement","name","listener","capture","superAddEventListener","Diagram","prototype","runOutsideAngular","call","run","initializeModel","nodeDataArray","linkDataArray","modelData","delayInitialization","model","commit","m","assignAllDataProperties","mergeNodeDataArray","cloneDeep","GraphLinksModel","mergeLinkDataArray","initializeModelChangedListener","component","hasOwnProperty","modelChangedListener","e","isTransactionFinished","isReadOnly","modelChange","dataChanges","toIncrementalData","emit","addModelChangedListener","mergeAppDataWithModel","isInit","DiagramComponent","skipsDiagramUpdate","wasCleared","ngAfterViewInit","diagramDiv","Error","initDiagram","divRef","nativeElement","div","ngOnChanges","clear","ngOnDestroy","ɵfac","NgZone","ɵcmp","type","args","selector","template","divClassName","static","PaletteComponent","palette","paletteDiv","initPalette","Palette","OverviewComponent","observedDiagram","overview","overviewDiv","initOverview","Overview","contentAlignment","Spot","Center","changes","currentValue","previousValue","observed","DataSyncService","syncNodeData","nodeData","modifiedNodeData","insertedNodeKeys","removedNodeKeys","modifiedNodesMap","Map","keyIdxMap","forEach","nd","idx","key","getKeyForNodeData","set","newNodeDataArray","draft","get","undefined","has","push","removals","map","sort","i","length","splice","syncLinkData","linkData","modifiedLinkData","insertedLinkKeys","removedLinkKeys","modifiedLinksMap","ld","getKeyForLinkData","syncModelData","ɵprov","GojsAngularModule","ɵmod","ɵinj","declarations","imports","providers","exports"],"sources":["/home/selvakumar/Desktop/village_talkies/node_modules/gojs-angular/fesm2020/gojs-angular.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, ViewChild, Injectable, NgModule } from '@angular/core';\nimport * as go from 'gojs';\nimport produce from 'immer';\n\n/**\r\n * Defines some shared helper static functions, used in Diagram / Palette / Overview Components\r\n */\r\nclass NgDiagramHelper {\r\n    constructor() { }\r\n    /**\r\n     * Ensures mousemove event listeners on a diagram's canvas are run outside NgZone.\r\n     * This way, change detection isn't triggered on each mousemove, improving performance.\r\n     *\r\n     * If some state-alteration must happen on a mousemove event inside the diagram, use zone.run() to make sure the event triggers angular change detection.\r\n     * Used by DiagramComponent, PaletteComponent, and OverviewComponent in their ngAfterViewInit lifecycle hooks\r\n     * @param diagram\r\n     * @param zone\r\n     */\r\n    static makeMouseMoveRunOutsideAngularZone(diagram, zone) {\r\n        diagram.addEventListener = (DOMElement, name, listener, capture) => {\r\n            const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n            if (name === 'mousemove') {\r\n                zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n            }\r\n            else {\r\n                zone.run(() => {\r\n                    superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n                });\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Initialize a given diagram's model with given node / link / model data\r\n     * @param diagram\r\n     * @param nodeDataArray\r\n     * @param linkDataArray\r\n     * @param modelData\r\n     */\r\n    static initializeModel(diagram, nodeDataArray, linkDataArray, modelData) {\r\n        diagram.delayInitialization(() => {\r\n            const model = diagram.model;\r\n            model.commit((m) => {\r\n                if (modelData) {\r\n                    m.assignAllDataProperties(m.modelData, modelData);\r\n                }\r\n                m.mergeNodeDataArray(m.cloneDeep(nodeDataArray));\r\n                if (linkDataArray && m instanceof go.GraphLinksModel) {\r\n                    m.mergeLinkDataArray(m.cloneDeep(linkDataArray));\r\n                }\r\n            }, null);\r\n        });\r\n    }\r\n    /**\r\n     * Initialize the model changed listener for the Palette / Diagram of a given compoennt; ensure it runs inside the component's ngZone.\r\n     * Those changes will be emitted through a the component's modelChange EventEmitter.\r\n     * @param component\r\n     */\r\n    static initializeModelChangedListener(component) {\r\n        var diagram = null;\r\n        if (!(component.hasOwnProperty(\"diagram\")) && !(component.hasOwnProperty(\"palette\")))\r\n            return;\r\n        if (component.hasOwnProperty(\"diagram\"))\r\n            diagram = component[\"diagram\"];\r\n        if (component.hasOwnProperty(\"palette\"))\r\n            diagram = component[\"palette\"];\r\n        component.modelChangedListener = (e) => {\r\n            if (e.isTransactionFinished && e.model && !e.model.isReadOnly && component.modelChange) {\r\n                // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n                component.zone.run(() => {\r\n                    const dataChanges = e.model.toIncrementalData(e);\r\n                    if (dataChanges !== null)\r\n                        component.modelChange.emit(dataChanges);\r\n                });\r\n            }\r\n        };\r\n        diagram.addModelChangedListener(component.modelChangedListener);\r\n    }\r\n    /**\r\n     * Merge the app-level node / link / model data of a supplied Diagram|Palette Component with its underlying Diagram|Palette model data\r\n     * @param component\r\n     * @param isInit Whether or not to treat this update as a Diagram initialization\r\n     */\r\n    static mergeAppDataWithModel(component, isInit) {\r\n        var diagram = null;\r\n        if (component.hasOwnProperty(\"diagram\"))\r\n            diagram = component[\"diagram\"];\r\n        if (component.hasOwnProperty(\"palette\"))\r\n            diagram = component[\"palette\"];\r\n        diagram.model.commit((m) => {\r\n            if (isInit)\r\n                diagram.model.modelData = {};\r\n            // update modelData first, in case bindings on nodes / links depend on model data\r\n            diagram.model.assignAllDataProperties(diagram.model.modelData, component.modelData);\r\n            // merge node / link data\r\n            if (isInit)\r\n                diagram.model.nodeDataArray = [];\r\n            diagram.model.mergeNodeDataArray(component.nodeDataArray);\r\n            if (component.linkDataArray && diagram.model instanceof go.GraphLinksModel) {\r\n                if (isInit)\r\n                    diagram.model.linkDataArray = [];\r\n                diagram.model.mergeLinkDataArray(component.linkDataArray);\r\n            }\r\n        }, isInit ? null : 'update data');\r\n    }\r\n}\n\nclass DiagramComponent {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        /**  Link data for diagram. Optional. */\r\n        this.linkDataArray = null;\r\n        /** Model data for diagram. Optional. */\r\n        this.modelData = null;\r\n        /** Model changed listener function for diagram */\r\n        this.modelChangedListener = null;\r\n        /** Whether or not to skip merging app data with GoJS model data (set to true if update is coming from GoJS, false if coming from app-level, usually) */\r\n        this.skipsDiagramUpdate = false;\r\n        /** Event emitter -- fires when diagram model changes. Capture this emitted event in parent component */\r\n        this.modelChange = new EventEmitter();\r\n        /** The Diagram itself */\r\n        this.diagram = null;\r\n        /** An internal flag used to tell ngOnChanges to treat the next sync operation as a Diagram initialization */\r\n        this.wasCleared = false;\r\n    }\r\n    /**\r\n     * Initializes diagram / model after view init\r\n     */\r\n    ngAfterViewInit() {\r\n        if (!this.diagramDiv) {\r\n            throw new Error(\"diagramDiv is not defined\");\r\n        }\r\n        this.diagram = this.initDiagram();\r\n        if (!(this.diagram instanceof go.Diagram)) {\r\n            throw new Error(\"initDiagram function did not return a go.Diagram\");\r\n        }\r\n        // reduces change detection on mouse moves, boosting performance\r\n        NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.diagram, this.zone);\r\n        // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n        // using the overridden addEventListener function defined in makeMouseMoveRunOutsideAngularZone\r\n        const divRef = this.diagramDiv.nativeElement;\r\n        if (divRef === null)\r\n            return;\r\n        this.diagram.div = divRef;\r\n        // initialize the diagram model with the provided node / link / model data\r\n        NgDiagramHelper.initializeModel(this.diagram, this.nodeDataArray, this.linkDataArray, this.modelData);\r\n        // initializer model listener\r\n        NgDiagramHelper.initializeModelChangedListener(this);\r\n    } // end ngAfterViewInit\r\n    /**\r\n     * If a change has occurred on an @Input property, merge the app-level changes with GoJS\r\n     */\r\n    ngOnChanges() {\r\n        if (!this.diagram || !this.diagram.model || this.skipsDiagramUpdate)\r\n            return;\r\n        // if clear was just called, treat this as initial\r\n        if (this.wasCleared) {\r\n            this.diagram.delayInitialization(() => {\r\n                NgDiagramHelper.mergeAppDataWithModel(this, true);\r\n            });\r\n            this.wasCleared = false;\r\n        }\r\n        else {\r\n            NgDiagramHelper.mergeAppDataWithModel(this);\r\n        }\r\n    } // end ngOnChanges\r\n    /**\r\n     * Clears the diagram of all nodes, links, and model data.\r\n     * Also clears the UndoManager history and clipboard.\r\n     * The next state update will be treated as diagram initialization.\r\n     */\r\n    clear() {\r\n        const diagram = this.diagram;\r\n        if (diagram !== null) {\r\n            diagram.clear();\r\n            this.wasCleared = true;\r\n        }\r\n    } // end clear function\r\n    /**\r\n     * Set this.diagram.div to null, removing all event listeners\r\n     */\r\n    ngOnDestroy() {\r\n        this.diagram.div = null; // removes event listeners\r\n    } // end ngOnDestroy function\r\n}\r\n/** @nocollapse */ DiagramComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: DiagramComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ DiagramComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.1.2\", type: DiagramComponent, selector: \"gojs-diagram\", inputs: { initDiagram: \"initDiagram\", nodeDataArray: \"nodeDataArray\", linkDataArray: \"linkDataArray\", modelData: \"modelData\", divClassName: \"divClassName\", skipsDiagramUpdate: \"skipsDiagramUpdate\" }, outputs: { modelChange: \"modelChange\" }, viewQueries: [{ propertyName: \"diagramDiv\", first: true, predicate: [\"ngDiagram\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: '<div #ngDiagram [className]=divClassName></div>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: DiagramComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'gojs-diagram',\r\n                    template: '<div #ngDiagram [className]=divClassName></div>'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { initDiagram: [{\r\n                type: Input\r\n            }], nodeDataArray: [{\r\n                type: Input\r\n            }], linkDataArray: [{\r\n                type: Input\r\n            }], modelData: [{\r\n                type: Input\r\n            }], divClassName: [{\r\n                type: Input\r\n            }], skipsDiagramUpdate: [{\r\n                type: Input\r\n            }], modelChange: [{\r\n                type: Output\r\n            }], diagramDiv: [{\r\n                type: ViewChild,\r\n                args: ['ngDiagram', { static: true }]\r\n            }] } });\n\nclass PaletteComponent {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        /** Link data for palette. Optional. */\r\n        this.linkDataArray = null;\r\n        /** Model data for palette. Optional. */\r\n        this.modelData = null;\r\n        /** Event emitter -- fires when palette model changes. Capture this emitted event in parent component */\r\n        this.modelChange = new EventEmitter();\r\n        /** The Palette itself */\r\n        this.palette = null;\r\n    }\r\n    /**\r\n     * Initialize Palette after view init\r\n     */\r\n    ngAfterViewInit() {\r\n        if (!this.paletteDiv) {\r\n            throw new Error(\"paletteDiv is not defined\");\r\n        }\r\n        this.palette = this.initPalette();\r\n        if (!(this.palette instanceof go.Palette)) {\r\n            throw new Error(\"initPalette function did not return a go.Palette\");\r\n        }\r\n        // reduces change detection on mouse moves, boosting performance\r\n        NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.palette, this.zone);\r\n        // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n        // using the overridden addEventListener function above\r\n        const divRef = this.paletteDiv.nativeElement;\r\n        if (divRef == null)\r\n            return;\r\n        this.palette.div = divRef;\r\n        // initialize palette model\r\n        NgDiagramHelper.initializeModel(this.palette, this.nodeDataArray, this.linkDataArray, this.modelData);\r\n    }\r\n    /**\r\n     * If a change has occured on an @Input property, merge the app-level changes with GoJS\r\n     */\r\n    ngOnChanges() {\r\n        if (!this.palette || !this.palette.model)\r\n            return;\r\n        NgDiagramHelper.mergeAppDataWithModel(this);\r\n    } // end ngOnChanges \r\n    ngOnDestroy() {\r\n        this.palette.div = null; // removes event listeners\r\n    }\r\n}\r\n/** @nocollapse */ PaletteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: PaletteComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ PaletteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.1.2\", type: PaletteComponent, selector: \"gojs-palette\", inputs: { initPalette: \"initPalette\", nodeDataArray: \"nodeDataArray\", linkDataArray: \"linkDataArray\", modelData: \"modelData\", divClassName: \"divClassName\" }, outputs: { modelChange: \"modelChange\" }, viewQueries: [{ propertyName: \"paletteDiv\", first: true, predicate: [\"ngPalette\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: '<div #ngPalette [className]=divClassName></div>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: PaletteComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'gojs-palette',\r\n                    template: '<div #ngPalette [className]=divClassName></div>'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { initPalette: [{\r\n                type: Input\r\n            }], nodeDataArray: [{\r\n                type: Input\r\n            }], linkDataArray: [{\r\n                type: Input\r\n            }], modelData: [{\r\n                type: Input\r\n            }], divClassName: [{\r\n                type: Input\r\n            }], modelChange: [{\r\n                type: Output\r\n            }], paletteDiv: [{\r\n                type: ViewChild,\r\n                args: ['ngPalette', { static: true }]\r\n            }] } });\n\nclass OverviewComponent {\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n        /** The Diagram to observe with the Overview */\r\n        this.observedDiagram = null;\r\n        /** The Overview itself  */\r\n        this.overview = null;\r\n    }\r\n    /**\r\n     * Initialize the overview\r\n     */\r\n    ngAfterViewInit() {\r\n        if (!this.overviewDiv) {\r\n            throw new Error(\"overviewDiv is not defined\");\r\n        }\r\n        if (this.initOverview) {\r\n            this.overview = this.initOverview();\r\n            if (!(this.overview instanceof go.Overview)) {\r\n                throw new Error(\"initOverview function did not return a go.Overview\");\r\n            }\r\n        }\r\n        else {\r\n            this.overview = new go.Overview();\r\n            this.overview.contentAlignment = go.Spot.Center;\r\n        }\r\n        // reduces change detection on mouse moves, boosting performance\r\n        NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.overview, this.zone);\r\n        this.overview.div = this.overviewDiv.nativeElement;\r\n    }\r\n    /**\r\n     * Only update when the observed diagram changes\r\n     * @param changes\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (!this.overview)\r\n            return;\r\n        if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {\r\n            this.overview.observed = changes.observedDiagram.currentValue;\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.overview.div = null; // removes event listeners\r\n    }\r\n}\r\n/** @nocollapse */ OverviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: OverviewComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ OverviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.1.2\", type: OverviewComponent, selector: \"gojs-overview\", inputs: { initOverview: \"initOverview\", divClassName: \"divClassName\", observedDiagram: \"observedDiagram\" }, viewQueries: [{ propertyName: \"overviewDiv\", first: true, predicate: [\"ngOverview\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: '<div #ngOverview [className]=divClassName></div>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: OverviewComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'gojs-overview',\r\n                    template: '<div #ngOverview [className]=divClassName></div>'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { initOverview: [{\r\n                type: Input\r\n            }], divClassName: [{\r\n                type: Input\r\n            }], observedDiagram: [{\r\n                type: Input\r\n            }], overviewDiv: [{\r\n                type: ViewChild,\r\n                args: ['ngOverview', { static: true }]\r\n            }] } });\n\nclass DataSyncService {\r\n    /**\r\n     * Sync a node data array with a set of changes\r\n     * @param changes The set of changes to the GoJS model\r\n     * @param nodeData The node data array to merge these changes with\r\n     * @param model Required if you have defined your model.nodeKeyProperty to be something other than 'key'\r\n     * @returns A node data array, merged with the changes\r\n     */\r\n    static syncNodeData(changes, nodeData, model) {\r\n        if (!changes)\r\n            return nodeData;\r\n        if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys)\r\n            return nodeData;\r\n        // maintain a map of modified nodes for fast lookup during insertion\r\n        const modifiedNodesMap = new go.Map();\r\n        // generate a map of keys -> indices for faster operations\r\n        const keyIdxMap = new Map();\r\n        nodeData.forEach((nd, idx) => {\r\n            const key = model ? model.getKeyForNodeData(nd) : nd['key'];\r\n            keyIdxMap.set(key, idx);\r\n        });\r\n        // nodeData is immutable, modify it using the immer package's \"produce\" function (creates new array)\r\n        var newNodeDataArray = produce(nodeData, (draft) => {\r\n            // account for modified node data\r\n            if (changes.modifiedNodeData) {\r\n                changes.modifiedNodeData.forEach((nd) => {\r\n                    // Get the value of the node key property checking wether is a function or a string\r\n                    const key = model ? model.getKeyForNodeData(nd) : nd['key'];\r\n                    modifiedNodesMap.set(key, nd);\r\n                    const idx = keyIdxMap.get(key);\r\n                    if (idx !== undefined && idx >= 0) {\r\n                        draft[idx] = nd;\r\n                    }\r\n                });\r\n            }\r\n            // account for inserted node data\r\n            if (changes.insertedNodeKeys) {\r\n                changes.insertedNodeKeys.forEach((key) => {\r\n                    const nd = modifiedNodesMap.get(key);\r\n                    if (nd && !keyIdxMap.has(key)) {\r\n                        draft.push(nd);\r\n                    }\r\n                });\r\n            }\r\n            // account for removed node data\r\n            if (changes.removedNodeKeys) {\r\n                const removals = changes.removedNodeKeys.map(key => keyIdxMap.get(key)).sort();\r\n                for (let i = removals.length - 1; i >= 0; i--) {\r\n                    draft.splice(removals[i], 1);\r\n                }\r\n            }\r\n        });\r\n        return newNodeDataArray;\r\n    }\r\n    /**\r\n     * Sync a link data array with a set of changes\r\n     * @param changes The set of changes to the GoJS model\r\n     * @param linkData The link data array to merge these changes with\r\n     * @param model Required if you have defined your model.linkKeyProperty to be something other than 'key'\r\n     * @returns A link data array, merged with the changes\r\n     */\r\n    static syncLinkData(changes, linkData, model) {\r\n        if (!changes)\r\n            return linkData;\r\n        if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys)\r\n            return linkData;\r\n        // maintain a map of modified nodes for fast lookup during insertion\r\n        const modifiedLinksMap = new go.Map();\r\n        // generate a map of keys -> indices for faster operations\r\n        const keyIdxMap = new Map();\r\n        linkData.forEach((ld, idx) => {\r\n            const key = model ? model.getKeyForLinkData(ld) : ld['key'];\r\n            keyIdxMap.set(key, idx);\r\n        });\r\n        // linkData is immutable, modify it using the immer package's \"produce\" function (creates new array)\r\n        linkData = produce(linkData, draft => {\r\n            // account for modified link data\r\n            if (changes.modifiedLinkData) {\r\n                changes.modifiedLinkData.forEach((ld) => {\r\n                    // Get the value of the link key\r\n                    const key = model ? model.getKeyForLinkData(ld) : ld['key'];\r\n                    modifiedLinksMap.set(key, ld);\r\n                    const idx = keyIdxMap.get(key);\r\n                    if (idx !== undefined && idx >= 0) {\r\n                        draft[idx] = ld;\r\n                    }\r\n                });\r\n            }\r\n            // account for inserted link data\r\n            if (changes.insertedLinkKeys) {\r\n                changes.insertedLinkKeys.forEach((key) => {\r\n                    const nd = modifiedLinksMap.get(key);\r\n                    if (nd && !keyIdxMap.has(key)) {\r\n                        draft.push(nd);\r\n                    }\r\n                });\r\n            }\r\n            // account for removed link data\r\n            if (changes.removedLinkKeys) {\r\n                const removals = changes.removedLinkKeys.map(key => keyIdxMap.get(key)).sort();\r\n                for (let i = removals.length - 1; i >= 0; i--) {\r\n                    draft.splice(removals[i], 1);\r\n                }\r\n            }\r\n        });\r\n        return linkData;\r\n    }\r\n    /**\r\n     * Sync modelData with a set of changes\r\n     * @param changes The set of changes to the GoJS model\r\n     * @param modelData The modelData to merge these changes with\r\n     * @returns A modelData object, merged with the changes\r\n     */\r\n    static syncModelData(changes, modelData) {\r\n        if (!changes)\r\n            return modelData;\r\n        if (!changes.modelData)\r\n            return modelData;\r\n        if (changes.modelData) {\r\n            return changes.modelData;\r\n        }\r\n    }\r\n}\r\n/** @nocollapse */ DataSyncService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: DataSyncService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\n/** @nocollapse */ DataSyncService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: DataSyncService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: DataSyncService, decorators: [{\r\n            type: Injectable\r\n        }] });\n\nclass GojsAngularModule {\r\n}\r\n/** @nocollapse */ GojsAngularModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: GojsAngularModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ GojsAngularModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.1.2\", ngImport: i0, type: GojsAngularModule, declarations: [DiagramComponent,\r\n        OverviewComponent,\r\n        PaletteComponent], exports: [DiagramComponent,\r\n        OverviewComponent,\r\n        PaletteComponent] });\r\n/** @nocollapse */ GojsAngularModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: GojsAngularModule, providers: [\r\n        DataSyncService\r\n    ] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.1.2\", ngImport: i0, type: GojsAngularModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        DiagramComponent,\r\n                        OverviewComponent,\r\n                        PaletteComponent\r\n                    ],\r\n                    imports: [],\r\n                    providers: [\r\n                        DataSyncService\r\n                    ],\r\n                    exports: [\r\n                        DiagramComponent,\r\n                        OverviewComponent,\r\n                        PaletteComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of gojs-angular\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DataSyncService, DiagramComponent, GojsAngularModule, OverviewComponent, PaletteComponent };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}